"use strict";(self.webpackChunkdocs_component_markup=self.webpackChunkdocs_component_markup||[]).push([[286],{2916:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"built_in/rainbow","title":"Rainbow","description":"Overview","source":"@site/docs/built_in/rainbow.mdx","sourceDirName":"built_in","slug":"/built_in/rainbow","permalink":"/docs-component-markup/docs/built_in/rainbow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Selector","permalink":"/docs-component-markup/docs/built_in/selector"},"next":{"title":"Gradient","permalink":"/docs-component-markup/docs/built_in/gradient"}}');var r=i(4848),o=i(8453),t=i(1119),s=i(7420),l=i(6025);const d={sidebar_position:13},c="Rainbow",p={},h=[{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2},{value:"Continuous Rainbow",id:"continuous-rainbow",level:3},{value:"Injected Color",id:"injected-color",level:3},{value:"Split Individual Rainbows",id:"split-individual-rainbows",level:3},{value:"Split Continuous Rainbow",id:"split-continuous-rainbow",level:3},{value:"Animated Split Continuous Rainbow",id:"animated-split-continuous-rainbow",level:3},{value:"Deep Rainbow",id:"deep-rainbow",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rainbow",children:"Rainbow"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Colorizes enclosed content with one continuous rainbow char-by-char, where client-rendered content\nlike the ",(0,r.jsx)(n.a,{href:"./keybind",children:"Keybind"}),"-Tag and its companions cannot, due to inherent limitations, be\nsplit up and will just be considered as an atomic unit."]}),"\n",(0,r.jsx)(t.J,{tag:{name:"rainbow",aliases:[],selfClosing:!1,attributes:[{name:"phase",aliases:[],description:"Phase-offset of the transition; 0-100%",fallback:"0",multiValue:!1,type:s.j.NUMBER},{name:"override-colors",aliases:[],description:"Whether to override already colorized members",fallback:"false",multiValue:!1,type:s.j.BOOLEAN},{name:"skip-whitespace",aliases:[],description:"Whether to skip whitespace when coloring",fallback:"true",multiValue:!1,type:s.j.BOOLEAN},{name:"skip-non-text",aliases:[],description:"Whether to skip atomic units like <key/>",fallback:"false",multiValue:!1,type:s.j.BOOLEAN},{name:"merge-inner",aliases:[],description:"Whether to merge inner rainbows for continuity",fallback:"false",multiValue:!1,type:s.j.BOOLEAN},{name:"deep",aliases:[],description:"Whether to dive into children's markup-attributes",fallback:"false",multiValue:!1,type:s.j.BOOLEAN}]}}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"continuous-rainbow",children:"Continuous Rainbow"}),"\n",(0,r.jsx)(n.p,{children:"The simplest form of a rainbow, using all standard attribute-values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow>All of the fancy rainbow colors!</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/static_continuous_rainbow.png")}),"\n",(0,r.jsx)(n.h3,{id:"injected-color",children:"Injected Color"}),"\n",(0,r.jsx)(n.p,{children:"By default, colorized members will keep their style and the transition will just skip over them."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow>All of the <red>fancy</> rainbow colors!</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/static_injected_rainbow.png")}),"\n",(0,r.jsx)(n.h3,{id:"split-individual-rainbows",children:"Split Individual Rainbows"}),"\n",(0,r.jsxs)(n.p,{children:["In the following example, the text ",(0,r.jsx)(n.code,{children:"l-me: 'hellohello-worldworld-testtest'"})," is to be colorized\nwith individual rainbows per word, having the hyphens shaded in a mere grey-tone."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow\n  *for-word=\"'hellohello-worldworld-testtest' @ '-'\"\n  *for-separator={<gray>-}\n>{word}</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/static_split_rainbow.png")}),"\n",(0,r.jsx)(n.p,{children:"The above could also be specified without making use of advanced features like loops and the\nexplode-operator, just like the following example portrays:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow>hellohello</><gray>-</><rainbow>worldworld</><gray>-</><rainbow>testtest</>\n"})}),"\n",(0,r.jsx)(n.p,{children:"But the prior style allows for great flexibility when it comes to data-driven rendering, as injected monochrome\npassages may now be dynamically defined by the environment."}),"\n",(0,r.jsx)(n.h3,{id:"split-continuous-rainbow",children:"Split Continuous Rainbow"}),"\n",(0,r.jsx)(n.p,{children:"When the merge-attribute is enabled, inner rainbows will be joined in order to allow for visual continuity."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow merge-inner>\n  <rainbow\n    *for-word=\"'hellohello-worldworld-testtest' @ '-'\"\n    *for-separator={<gray>-}\n  >{word}</>\n</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/static_split_continuous_rainbow.png")}),"\n",(0,r.jsx)(n.h3,{id:"animated-split-continuous-rainbow",children:"Animated Split Continuous Rainbow"}),"\n",(0,r.jsx)(n.p,{children:"By binding the phase-offset to an environment-variable, all while altering said variable in-between calls to\nrender, animations may be created."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow\n  merge-inner\n  [phase]=\"current_phase\"\n>\n  <rainbow\n    *for-word=\"'hellohello-worldworld-testtest' @ '-'\"\n    *for-separator={<gray>-}\n  >{word}</>\n</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/animated_split_continuous_rainbow.gif")}),"\n",(0,r.jsx)(n.h3,{id:"deep-rainbow",children:"Deep Rainbow"}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"deep"}),"-flag set, The rainbow will dive into the markup-attributes of its members in specified\norder and colorize their contents (if applicable) just as well; this allows for some neat effects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:"<rainbow deep>\n  <hover-text value={and it continues here!}>The rainbow starts here</>\n</>\n"})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/deep_rainbow_text.png")}),"\n",(0,r.jsx)(n.p,{children:"This feature works with an arbitrary number of attributes, so yes - crazy (and possibly useless)\ncolorization like the following works also."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-component-markup",children:'<rainbow deep>\n  <hover-item\n    material="dirt"\n    amount=3\n    name={My dirt}\n    lore={\n      First line<br/>\n      Second line<br/>\n      Third line\n    }\n  >My text</>\n'})}),"\n",(0,r.jsx)("img",{className:"rendered-image",src:(0,l.Ay)("/img/deep_rainbow_item.png")})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);