"use strict";(self.webpackChunkdocs_component_markup=self.webpackChunkdocs_component_markup||[]).push([[528],{6184:(e,n,l)=>{l.d(n,{A:()=>c});l(6540);var t=l(1765),s=l(4586),r=l(5293),i=l(4848);function c({children:e,language:n=""}){const{siteConfig:l}=(0,s.A)(),{colorMode:c}=(0,r.G)(),d=l.themeConfig?.prism||{},a=d.theme||{},h=d.darkTheme||{},x="dark"===c?h:a;return(0,i.jsx)(t.f4,{code:e.trim(),language:n,theme:x,children:({tokens:e,getTokenProps:n})=>(0,i.jsx)("code",{style:{...x.plain,padding:".35rem .4rem"},children:e[0].map(((e,l)=>{const{style:t,children:s,className:r}=n({token:e,key:l});return(0,i.jsx)("span",{style:t,className:r,children:s},l)}))})})}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>c});var t=l(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},9353:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"expression_syntax","title":"Expression Syntax","description":"Whenever specifying placeholders, binding variables, using structural attributes or binding dynamic values to the attributes of tags, expressions are the means via which to describe the value used; they can be as simple as accessing a variable, stringing data together or computing a numeric value and may become as nuanced as using boolean logic, providing fallback-values or accessing members of a variable.","source":"@site/docs/expression_syntax.md","sourceDirName":".","slug":"/expression_syntax","permalink":"/docs-component-markup/docs/expression_syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Tag Syntax","permalink":"/docs-component-markup/docs/tag_syntax"},"next":{"title":"Defining Tags","permalink":"/docs-component-markup/docs/defining_tags"}}');var s=l(4848),r=l(8453);l(6184);const i={sidebar_position:3},c="Expression Syntax",d={},a=[{value:"String Literals",id:"string-literals",level:2},{value:"Numbers",id:"numbers",level:2},{value:"Concatenation Operator",id:"concatenation-operator",level:2},{value:"Mathematical Operators",id:"mathematical-operators",level:2},{value:"Immediate List",id:"immediate-list",level:2},{value:"Range Operator",id:"range-operator",level:2},{value:"Substring Operator",id:"substring-operator",level:2},{value:"Keywords",id:"keywords",level:2},{value:"Accessing Variables",id:"accessing-variables",level:2},{value:"Accessing Members",id:"accessing-members",level:2},{value:"List-Items",id:"list-items",level:3},{value:"Map-Values",id:"map-values",level:3},{value:"Object-properties",id:"object-properties",level:3},{value:"Boolean Logic",id:"boolean-logic",level:2},{value:"Not (Invert)",id:"not-invert",level:3},{value:"Or (Disjunction)",id:"or-disjunction",level:3},{value:"And (Conjunction)",id:"and-conjunction",level:3},{value:"Ternary Operator",id:"ternary-operator",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Fallback Values",id:"fallback-values",level:2}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"expression-syntax",children:"Expression Syntax"})}),"\n",(0,s.jsx)(n.p,{children:"Whenever specifying placeholders, binding variables, using structural attributes or binding dynamic values to the attributes of tags, expressions are the means via which to describe the value used; they can be as simple as accessing a variable, stringing data together or computing a numeric value and may become as nuanced as using boolean logic, providing fallback-values or accessing members of a variable."}),"\n",(0,s.jsx)(n.h2,{id:"string-literals",children:"String Literals"}),"\n",(0,s.jsxs)(n.p,{children:["A string represents a sequence of characters as-is, to be used in expressions; their contents are delimited by single-quotes (",(0,s.jsx)(n.code,{children:"l-me: '"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"'this is a string-literal'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In order to include a literal single-quote, prepend it by a backslash (",(0,s.jsx)(n.code,{children:"\\"}),") in order to avoid premature string termination."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"'containing a \\' single quote'\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["When specifying string-literals inside of attribute-values which themselves use string-notation delimited by a double-quote (",(0,s.jsx)(n.code,{children:'"'}),"), said double-quotes are to be marked by a preceding backslash (",(0,s.jsx)(n.code,{children:"\\"}),") in order to avoid premature attribute-value termination."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-component-markup",children:'<my-tag [my-attribute]="\'my string literal containing a \\" double-quote\'">\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"numbers",children:"Numbers"}),"\n",(0,s.jsxs)(n.p,{children:["Numeric values are always expressed using the decimal system, i.e. digits ",(0,s.jsx)(n.code,{children:"l-me: 0"})," through ",(0,s.jsx)(n.code,{children:"l-me: 9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"8912\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Fractional values may be depicted using the decimal-dot (",(0,s.jsx)(n.code,{children:"."}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"2.7182\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, numbers may become negative simply by prepending a minus-sign (",(0,s.jsx)(n.code,{children:"l-me: -"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"-512\n"})}),"\n",(0,s.jsx)(n.h2,{id:"concatenation-operator",children:"Concatenation Operator"}),"\n",(0,s.jsxs)(n.p,{children:["Due to this syntax being dynamically typed, the addition-operator (",(0,s.jsx)(n.code,{children:"l-me: +"}),") cannot reliably be overloaded to concatenate values back-to-back into a resulting string; thus, the ampersand (",(0,s.jsx)(n.code,{children:"l-me: &"}),") is used to denote this intent."]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that ",(0,s.jsx)(n.code,{children:"l-me: a"})," holds ",(0,s.jsx)(n.code,{children:"l-me: 'Hello'"})," and ",(0,s.jsx)(n.code,{children:"l-me: b"})," holds ",(0,s.jsx)(n.code,{children:"l-me: 'World'"}),", the expression"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"a & ', ' & b & '!'\n"})}),"\n",(0,s.jsx)(n.p,{children:"will result in"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"'Hello, World!'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"mathematical-operators",children:"Mathematical Operators"}),"\n",(0,s.jsx)(n.p,{children:"The following mathematical operators are available when formulae are to be expressed. The operator of highest precedence will be evaluated first - use parentheses when necessary."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Operation"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Precedence"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Addition"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a + b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Subtraction"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a - b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Multiplication"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a * b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Division"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a / b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Modulo"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a % b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Exponentiation"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a ^ b"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"3"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"immediate-list",children:"Immediate List"}),"\n",(0,s.jsxs)(n.p,{children:["Whenever static lists of items are to be instantiated for further use, simply specify the desired items in a comma-separated (",(0,s.jsx)(n.code,{children:"l-me: ,"}),") list, enclosed by square brackets (",(0,s.jsx)(n.code,{children:"l-me: []"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"['first', 'second', 'third']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This notation may especially come in handy when combined with the structural ",(0,s.jsx)(n.code,{children:"*for-"})," attribute:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-component-markup",children:"<red *for-word=\"['first', 'second', 'third']\">Hello, {{word}}!\n"})}),"\n",(0,s.jsx)(n.p,{children:"Items may also once again be lists themselves, allowing for a tuple-style dataset."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"[['apple', 'red'], ['banana', 'yellow']]\n"})}),"\n",(0,s.jsx)(n.p,{children:"And thereby give rise to more advanced concepts of templating."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-component-markup",children:"<color\n  *for-word=\"[['apple', 'red'], ['banana', 'yellow']]\"\n  [value]=\"word[1]\"\n>Hello, {{word[0]}}!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"range-operator",children:"Range Operator"}),"\n",(0,s.jsxs)(n.p,{children:["In order to quickly generate a list containing a subsequent sequence of numbers, the range operator may be used, with both bounds being ",(0,s.jsx)(n.em,{children:"inclusive"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"1..10\n"})}),"\n",(0,s.jsx)(n.p,{children:"is thereby equivalent to"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This operator may especially come in handy when combined with the structural ",(0,s.jsx)(n.code,{children:"*for-"})," attribute."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-component-markup",children:'<red *for-number="1..10">Hello, {{number}}!\n'})}),"\n",(0,s.jsx)(n.h2,{id:"substring-operator",children:"Substring Operator"}),"\n",(0,s.jsxs)(n.p,{children:["A substring represents a sub-sequence of characters within another string; it may span only a single character, a few or up to the whole input, based on the colon-separated (",(0,s.jsx)(n.code,{children:":"}),") start- and end-indices, which are both ",(0,s.jsx)(n.em,{children:"inclusive"})," and start at zero."]}),"\n",(0,s.jsxs)(n.p,{children:["Given an ",(0,s.jsx)(n.code,{children:"l-me: input"})," of ",(0,s.jsx)(n.code,{children:"l-me: 'ABCDEFGHIJ'"})," with the following indices"]}),"\n",(0,s.jsxs)("table",{style:{textAlign:"center"},children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Index"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 0"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 1"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 2"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 3"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 4"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 5"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 6"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 7"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 8"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 9"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Letter"}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'A'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'B'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'C'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'D'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'E'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'F'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'G'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'H'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'I'"})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.code,{children:"l-me: 'J'"})})]})]}),"\n",(0,s.jsx)(n.p,{children:"these will be the results of a few substring-operations"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Operation"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[0:9]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'ABCDEFGHIJ'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[2:]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'CDEFGHIJ'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[:8]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'ABCDEFGHI'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[:]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'ABCDEFGHIJ'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[4:6]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'EFG'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[-1:]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'J'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[:-2]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'AB'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[-1:-2]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'JAB'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[0:100]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'ABCDEFGHIJ'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input[-100:]"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'JIHGFEDCBA'"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"As becomes apparent, both the start- and end-indices are omittable (up to bounds); also, negative indices will wrap around. Whenever an index is out of bounds, meaning that its absolute value is greater than or equal to the number of characters within the string, the operation will just stop right there."}),"\n",(0,s.jsx)(n.h2,{id:"keywords",children:"Keywords"}),"\n",(0,s.jsx)(n.p,{children:"Keywords are reserved names, not able to be used as variables, holding a static value:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['Boolean value of 1, i.e. "yes": ',(0,s.jsx)(n.code,{children:"l-me: true"})]}),"\n",(0,s.jsxs)(n.li,{children:['Boolean value of 0, i.e. "no": ',(0,s.jsx)(n.code,{children:"l-me: false"})]}),"\n",(0,s.jsxs)(n.li,{children:["The absence of a value: ",(0,s.jsx)(n.code,{children:"l-me: null"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"accessing-variables",children:"Accessing Variables"}),"\n",(0,s.jsxs)(n.p,{children:["All variables used in expressions adhere to the convention of ",(0,s.jsx)(n.code,{children:"l-me: snake_case"})," and simply by specifying their name, their corresponding value will be substituted at the stage of evaluation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_variable\n"})}),"\n",(0,s.jsx)(n.h2,{id:"accessing-members",children:"Accessing Members"}),"\n",(0,s.jsx)(n.p,{children:"Variables are not required to hold mere scalar values, e.g. numbers, booleans, strings, etc., but may just as well be lists containing multiple items, maps containing multiple key-value pairs, or objects which contain named fields."}),"\n",(0,s.jsx)(n.h3,{id:"list-items",children:"List-Items"}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that ",(0,s.jsx)(n.code,{children:"l-me: my_list"})," is a collection of individual items, say ",(0,s.jsx)(n.code,{children:"l-me: 'first'"}),", ",(0,s.jsx)(n.code,{children:"l-me: 'second'"})," and ",(0,s.jsx)(n.code,{children:"l-me: 'third'"}),", their indices are simply represented by an ascending numeric index starting at zero. The index may be derived by the value of a variable, interpreted as a number."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_list[my_index]\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"my_index"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 0"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'first'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 1"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'second'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 2"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'third'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 3"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: null"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Indices can also be specified immediately, with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_list[0]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["resulting in ",(0,s.jsx)(n.code,{children:"l-me: 'first'"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Analogous to bounds on substrings, list-indices may also be negative, meaning that they access elements relative to the back of the sequence, with ",(0,s.jsx)(n.code,{children:"l-me: -1"})," being the last, ",(0,s.jsx)(n.code,{children:"l-me: -2"})," the second to last, etc."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"my_index"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: -1"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'third'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: -2"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'second'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: -3"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'first'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: -4"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: null"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"map-values",children:"Map-Values"}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that ",(0,s.jsx)(n.code,{children:"l-me: my_map"})," is assigning keys representing usernames to values being their statistics, say ",(0,s.jsx)(n.code,{children:"l-me: 'Notch'"})," -> ",(0,s.jsx)(n.code,{children:"l-me: 384"}),", ",(0,s.jsx)(n.code,{children:"l-me: 'Steve'"})," -> ",(0,s.jsx)(n.code,{children:"l-me: 247"})," and ",(0,s.jsx)(n.code,{children:"l-me: 'Alex'"})," -> ",(0,s.jsx)(n.code,{children:"l-me: 412"}),", the value of each such key may be accessed by specifying it analogously to numeric indices on lists."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_map[my_key]\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"my_key"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'Notch'"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 384"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'Steve'"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 247"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'Alex'"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 412"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'Herobrine'"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: null"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Keys may also be specified immediately, with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_map['Alex']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["resulting in ",(0,s.jsx)(n.code,{children:"l-me: 412"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"object-properties",children:"Object-properties"}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that ",(0,s.jsx)(n.code,{children:"l-me: my_object"})," is a Java-object containing a few members, say"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"{ effect: 'Regeneration', duration_ticks: 900, amplitude: 2 }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["the value of each member may be accessed by appending a dot (",(0,s.jsx)(n.code,{children:"l-me: ."}),"), followed by its name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_object.my_member\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Expression"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: my_object.effect"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 'Regeneration'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: my_object.duration_ticks"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 900"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: my_object.amplitude"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: 2"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Analogously to maps, keys may also be specified dynamically, with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_object[my_member_name]\n"})}),"\n",(0,s.jsx)(n.p,{children:"or even immediately, using"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"my_object['duration_ticks']\n"})}),"\n",(0,s.jsxs)(n.p,{children:["resulting in ",(0,s.jsx)(n.code,{children:"l-me: 900"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["When programming in Java, the established naming-convention regarding properties is ",(0,s.jsx)(n.code,{children:"camelCase"}),"; as to avoid programmers from being forced to employ ",(0,s.jsx)(n.code,{children:"snake_case"})," on objects they want to make accessible within templates, name-conversion occurs automatically, e.g. ",(0,s.jsx)(n.code,{children:"myExampleVariable"})," becomes ",(0,s.jsx)(n.code,{children:"my_example_variable"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"boolean-logic",children:"Boolean Logic"}),"\n",(0,s.jsx)(n.h3,{id:"not-invert",children:"Not (Invert)"}),"\n",(0,s.jsxs)(n.p,{children:["By prepending an expression with a bang (",(0,s.jsx)(n.code,{children:"l-me: !"}),"), it's value is interpreted as a boolean and will be inverted, meaning that ",(0,s.jsx)(n.code,{children:"l-me: true"})," will become ",(0,s.jsx)(n.code,{children:"l-me: false"})," and vice-versa."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"!value\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"value"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"or-disjunction",children:"Or (Disjunction)"}),"\n",(0,s.jsxs)(n.p,{children:["By stringing two expressions together using a double-pipe (",(0,s.jsx)(n.code,{children:"l-me: ||"}),"), both the left- and the right hand side will be interpreted as boolean values; given that any one of them is ",(0,s.jsx)(n.code,{children:"l-me: true"}),", the result will be also - otherwise, ",(0,s.jsx)(n.code,{children:"l-me: false"})," will be the result."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"lhs || rhs\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"lhs"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"rhs"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"and-conjunction",children:"And (Conjunction)"}),"\n",(0,s.jsxs)(n.p,{children:["By stringing two expressions together using a double-ampersand (",(0,s.jsx)(n.code,{children:"l-me: &&"}),"), both the left- and the right hand side will be interpreted as boolean values; given that both are ",(0,s.jsx)(n.code,{children:"l-me: true"}),", the result will be also - otherwise, ",(0,s.jsx)(n.code,{children:"l-me: false"})," will be the result."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"lhs && rhs\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"lhs"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"rhs"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"ternary-operator",children:"Ternary Operator"}),"\n",(0,s.jsxs)(n.p,{children:["If an expression is to be selected out of two branches, one for ",(0,s.jsx)(n.code,{children:"l-me: true"})," and one for ",(0,s.jsx)(n.code,{children:"l-me: false"}),", given a boolean input, this will be the operator of choice."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"input ? branch_true : branch_false\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"input"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: false"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: branch_false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: true"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: branch_true"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Comparison"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"True when"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Greater Than"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a > b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is greater than ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Greater Than Or Equal"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a >= b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is greater than or equal to ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Less Than"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a < b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is less than ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Less Than Or Equal"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a <= b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is less than or equal to ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Equal To"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a == b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is equal to ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Not Equal To"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: a != b"})}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.code,{children:"l-me: a"})," is not equal to ",(0,s.jsx)(n.code,{children:"l-me: b"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"fallback-values",children:"Fallback Values"}),"\n",(0,s.jsxs)(n.p,{children:["If a variable or an expression in general may return a ",(0,s.jsx)(n.code,{children:"l-me: null"}),"-value, a fallback can be provided by appending it with a double-questionmark (",(0,s.jsx)(n.code,{children:"l-me: ??"}),"), followed by the actual value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup-expression",children:"input ?? fallback_variable\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"input"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Result"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: null"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: fallback_variable"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:["non-",(0,s.jsx)(n.code,{children:"l-me: null"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"l-me: input"})})]})]})]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);