"use strict";(self.webpackChunkdocs_component_markup=self.webpackChunkdocs_component_markup||[]).push([[787],{8467:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});const l=JSON.parse('{"id":"built_in/score","title":"Score","description":"Overview","source":"@site/docs/built_in/score.mdx","sourceDirName":"built_in","slug":"/built_in/score","permalink":"/docs-component-markup/docs/built_in/score","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Insert","permalink":"/docs-component-markup/docs/built_in/insert"},"next":{"title":"Translate","permalink":"/docs-component-markup/docs/built_in/translate"}}');var i=n(4848),r=n(8453),s=n(1119),t=n(7420);const o={sidebar_position:10},c="Score",d={},u=[{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2},{value:"Plain Value",id:"plain-value",level:3},{value:"Modified Value",id:"modified-value",level:3},{value:"Typed Value",id:"typed-value",level:3}];function h(e){const a={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"score",children:"Score"})}),"\n",(0,i.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(a.p,{children:"Substitutes the Scoreboard-value of a given objective for a provided score-holder; this tag\nacts as a placeholder and must thereby be self-closing (does not accept content)."}),"\n",(0,i.jsx)(s.J,{tag:{name:"score",aliases:[],selfClosing:!0,attributes:[{name:"name",aliases:[],description:"Name of the score-holder (player-name)",fallback:null,multiValue:!1,type:t.j.STRING},{name:"objective",aliases:[],description:"Name of the target-objective",fallback:null,multiValue:!1,type:t.j.STRING},{name:"type",aliases:[],description:["Additional objective-parameter if required","e.g. sand for objective mine_block"],fallback:"null",multiValue:!1,type:t.j.STRING},{name:"override",aliases:[],description:"Value to use as an override",fallback:"null",multiValue:!1,type:t.j.STRING},{name:"fallback",aliases:[],description:"Value to use as a fallback",fallback:"null",multiValue:!1,type:t.j.STRING},{name:"renderer",aliases:[],description:["Custom renderer to display a value","Introduces the {score_value} placeholder"],fallback:"null",multiValue:!1,type:t.j.MARKUP}]}}),"\n",(0,i.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(a.h3,{id:"plain-value",children:"Plain Value"}),"\n",(0,i.jsx)(a.p,{children:"In order to retrieve a score-value as-is, there's no need to specify a custom renderer."}),"\n",(0,i.jsx)(a.admonition,{type:"info",children:(0,i.jsxs)(a.p,{children:["By default, the scoreboard does not track any of the existing vanilla criteria, thus they need to be added manually by invoking: ",(0,i.jsx)(a.code,{children:"/scoreboard objectives add health health"}),". For this web-renderer, we randomly generate them."]})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-!component-markup",children:'The score-value is: <&b><score name="BlvckBytes" objective="health"/>\n'})}),"\n",(0,i.jsx)(a.h3,{id:"modified-value",children:"Modified Value"}),"\n",(0,i.jsxs)(a.p,{children:["With the renderer, score-values may be modified as desired; let's transform the count of half-hearts that ",(0,i.jsx)(a.code,{children:"health"})," shows a fractional number."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-!component-markup",children:'The score-value is: <&b><score\n  name="BlvckBytes"\n  objective="health"\n  renderer={{score_value / 2.0}}\n/>\n'})}),"\n",(0,i.jsx)(a.h3,{id:"typed-value",children:"Typed Value"}),"\n",(0,i.jsx)(a.p,{children:"Some objectives require a type, like when one wants to resolve how many blocks of a specific material have been mined by a player."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-!component-markup",children:'The score-value is: <&b><score\n  name="BlvckBytes"\n  objective="mine_block"\n  type="iron_ore"\n/>\n'})})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);